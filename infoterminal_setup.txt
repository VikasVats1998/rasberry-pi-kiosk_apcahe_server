Update and upgrade the system
	sudo apt update
	sudo apt upgrade -y

Install Apache
	sudo apt install apache2 -y

Start and enable Apache service
	sudo systemctl start apache2

To enable Apache to start on boot, run:
	sudo systemctl enable apache2
	
Change Ownership of the Directory  (This changes ownership to the user pi and the group www-data (the default group for Apache)
	sudo chown -R pi:www-data /var/www/html

Set Permissions for the Directory (755: Read and execute permissions for everyone, but write permissions only for the owner (more secure):)
	sudo chmod -R 777 /var/www/html
	
Restart Apache (optional)
	sudo systemctl restart apache2


How to install kiosk mode on Rasberry PI 

Step1: sudo raspi-config
----------------------------------------------
New Update Kiosk

Prerequisites
Install LabWC if it is not already installed.

On Debian-based systems:

sudo apt install labwc
On Arch-based systems:

sudo pacman -S labwc
Create a new user (optional but recommended for security).

Use a dedicated kiosk user with restricted permissions.


sudo adduser kiosk-user
Set up LabWC autostart for the kiosk user.

Steps to Configure Kiosk Mode
Create an autostart script for LabWC that launches the desired application in fullscreen on startup.


mkdir -p ~/.config/labwc
nano ~/.config/labwc/autostart
Edit the autostart file to launch your application in fullscreen. Here’s an example if you’re using a web browser like Firefox or Chromium:


#!/bin/sh
# Launch the application in fullscreen mode
chromium --kiosk "http://your-url-here.com" &
Replace "http://your-url-here.com" with the URL you want to display. For local applications, replace chromium with the executable path or command of your application.

Make the autostart script executable:

chmod +x ~/.config/labwc/autostart
Disable input options (optional). If you don’t want users to close the application or switch to other windows, you may want to disable keybindings and cursor visibility in LabWC.

To disable keybindings, edit the LabWC configuration file (you may need to create it if it doesn’t exist):


nano ~/.config/labwc/config
Add the following lines to disable keybindings:


# Disable all bindings
bindings = false
Optionally, you can hide the mouse cursor using an additional tool like unclutter:


sudo apt install unclutter
unclutter &
Test the configuration by logging in as the kiosk user and running LabWC:


labwc
LabWC should start, and your application should open in fullscreen, effectively providing a kiosk experience.

Autologin and Automatic Startup (Optional)
For a fully autonomous kiosk, set up autologin for the kiosk user:

Enable autologin by editing the display manager's configuration file (varies by DM, such as lightdm, gdm, or sddm).

Configure the session to start LabWC upon login.

For example, with LightDM, edit the /etc/lightdm/lightdm.conf file and set:


[Seat:*]
autologin-user=kiosk-user
user-session=labwc
----------------------------------------------
Step2: enable auto login for Desktop

Step3: sudo nano run_kiosk.sh

Step4: add the following text -
	sleep 4 
	/bin/chromium-browser --kiosk --start-maximized --ozone-platform=wayland --noerrdialogs --disable-infobars --enable-features=OverlayScrollbar https://add.mkdream.in
	
Step5: sudo chmod +x run_kiosk.sh

step6: sudo nano .config/wayfire.ini

step7: add the following text -
	[autostart]
	screensaver = false
	dpms = false
	kiosk = /home/server1/run_kiosk.sh
	
step8: sudo apt install ydotool

step9: sudo nano hide_cursor.sh 

step10: add the following text 
	sleep 8
	sudo ydotool mousemove --delay 1000 10000 10000
	
step11: sudo chmod +x hide_cursor.sh

step12: add the following text -
	[autostart]
	screensaver = false
	dpms = false
	kiosk = /home/server1/run_kiosk.sh
	cursor = /home/server1/hide_cursor.sh
	
step13: sudo apt install wtype

step14: sudo nano run_keystroke.sh

step15: add the following text 
	sleep 10
	while true; do 
			wtype -M ctrl -p Tab
			wtype -M ctrl -p F5
			sleep 19
	done
	
step16: sudo chmod +x run_keystroke.sh 

step17: add the following text -
	[autostart]
	screensaver = false
	dpms = false
	kiosk = /home/server1/run_kiosk.sh
	cursor = /home/server1/hide_cursor.sh
	keystroke = /home/server1/run_keystroke.sh
-------------------------------------------------------------------------------------
How to setup a FTP server on rasberry pi
Step 1: Install vsftpd (Very Secure FTP Daemon)
	This is a popular FTP server that works well on Raspberry Pi.

	Open a terminal on your Raspberry Pi.
	Update your package lists:

	sudo apt update
Install vsftpd:

	sudo apt install vsftpd

Step 2: Configure vsftpd
	Now, you’ll need to modify the vsftpd configuration file to allow FTP access to the /var/www/html/ directory.

	Open the configuration file:

	sudo nano /etc/vsftpd.conf

	Make the following changes:

	Find anonymous_enable=YES and change it to:

		anonymous_enable=NO
		local_enable=YES
		write_enable=YES

	Add the following line at the end of the file to restrict users to their home directories:

		chroot_local_user=YES

If you want to allow users to navigate outside their home directory (to /var/www/html), you can add the following lines:

		allow_writeable_chroot=YES
			Save and close the file (press CTRL+X, then Y, and Enter).

Step 3: Create a User for FTP Access
	You’ll need to create a user or modify an existing user that has access to /var/www/html/.

Create a new user (or skip this if you already have one):

	sudo adduser ftpuser

	Set the user’s home directory to /var/www/html/:


	sudo usermod -d /var/www/html ftpuser
	Set proper permissions for the /var/www/html/ directory:

	sudo chown -R ftpuser:ftpuser /var/www/html
Step 4: Restart vsftpd
	After making the changes, restart the vsftpd service to apply them:

	sudo systemctl restart vsftpd

Step 5: Connect via FileZilla
Open FileZilla on your computer.

Enter the following details:

Host: Your Raspberry Pi’s IP address.
Username: The username you created or your default one (e.g., ftpuser).
Password: The password for the user.
Port: 21.
Click Quickconnect and you should be able to access the /var/www/html/ directory and manage files.
-------------------------------------------------------------------------------------
How to change FTP user password

1. List FTP Users
The users for your FTP server are typically defined in the system's user database. You can view the users who have been created on your Raspberry Pi by checking the /etc/passwd file. To list all users, you can run:

	cut -d: -f1 /etc/passwd

2. Change FTP User Passwords
To change the password for a specific user on your Raspberry Pi, you can use the passwd command. Here’s how:

Open the terminal.

Run the following command, replacing username with the actual username:


sudo passwd username
You will be prompted to enter a new password and confirm it.
-----------------------------------------------------------------------------------------
To use Websocket  for python
	pip3 install websockets --break-system-packages

-----------------------------------------------------------------------------------------
1. Install Node.js and npm:
First, update the package list:

	sudo apt update

Then, install Node.js and npm:

	sudo apt install nodejs npm

After installation, check if npm and node are installed correctly:

	node -v
	npm -v

This should display the versions of Node.js and npm.

2. Install the ws module:
Once npm is installed, you can install the ws WebSocket package:

	npm install express
	sudo npm install ws
	npm install multer
	npm install cors


------------------------------------------------------------------------------------------------

Grant Write Permission to the /var/www/html/media/ Directory:

You can give write permissions to the user running the Node.js process by changing the ownership or permissions of the /media/ directory.

Option 1: Change Ownership to the Current User

First, check which user is running Node.js. If you're using pi or another user, you can set the ownership of the directory to that user:

	sudo chown -R $(whoami):$(whoami) /var/www/html/media/

This command gives the current user ownership of the directory.

Option 2: Modify Permissions for All Users

If you prefer not to change the ownership, you can allow write access to all users for the /media/ directory:

	sudo chmod -R 777 /var/www/html/media/

This command grants read, write, and execute permissions to everyone, which is less secure but might be sufficient if you're just testing.

Verify Permissions:

After applying the changes, you can verify the directory permissions by running:

	ls -ld /var/www/html/media/

This will show the current permissions for the directory, which should include write access.

Restart Your Node.js Server:

Once the permissions are updated, restart your Node.js server:

	node /var/www/html/server.js


---------------------------------------------------------------------------------------------
2. Install GPIO Control Libraries
You'll need a library to manage GPIO pins from JavaScript. onoff is a popular choice:

npm install onoff


3. Use Alternative GPIO Library (Optional)
If the error persists, try using pigpio, which is more stable with recent versions of Node.js on Raspberry Pi.

Install pigpio:

npm install pigpio

-----------------------------------------------------------------------------------------------------
To automatically clear the Chromium browser cache on your Raspberry Pi 5, we'll combine a shell script with a cron job. The script will delete the cache files, and the cron job will schedule the script to run at your desired intervals.

Steps:

Create a Script:

Open a terminal window on your Raspberry Pi.
Use a text editor like nano or vim to create a new script:

sudo nano clear_cache.sh

Use code with caution.

Paste the following script into the editor:

#!/bin/bash
# Clear Chromium cache
rm -rf ~/.cache/Chromium/Default/Cache/*

Use code with caution.

Save the script and make it executable:

sudo chmod +x clear_cache.sh

Use code with caution.

Set Up a Cron Job:

Open the crontab editor:

sudo crontab -e

Use code with caution.

Add a line to schedule the script to run at your desired time and interval. For example, to run it every day at 3 AM:

0 3 * * * /path/to/your/script/clear_cache.sh

Replace /path/to/your/script/clear_cache.sh with the actual path to your script.
